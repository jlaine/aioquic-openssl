#!/usr/bin/env python

import argparse
import logging
import os
import shutil
import struct
import subprocess
import sys
import tempfile


def download(tarball_url, cache_dir):
    tarball_name = tarball_url.split("/")[-1]
    tarball_file = os.path.join(cache_dir, tarball_name)
    if not os.path.exists(tarball_file):
        logging.info("Downloading %s" % tarball_url)
        if not os.path.exists(cache_dir):
            os.mkdir(cache_dir)
        subprocess.check_call(
            ["curl", "--location", "--output", tarball_file, "--silent", tarball_url]
        )
    return tarball_file


def get_platform():
    if sys.platform == "linux":
        return "manylinux_%s" % os.uname().machine
    elif sys.platform == "darwin":
        return "macosx_%s" % os.uname().machine
    elif sys.platform == "win32":
        return "win%s" % (struct.calcsize("P") * 8)
    else:
        raise Exception("Unsupported platfom %s" % sys.platform)


parser = argparse.ArgumentParser(description="Build OpenSSL")
parser.add_argument("destination_dir")
parser.add_argument("--cache-dir", default="tarballs")
parser.add_argument("--output-dir", default="output")
args = parser.parse_args()
logging.basicConfig(level=logging.INFO)

# work around buggy 'tar' executable on Windows
if sys.platform == "win32":
    os.environ["PATH"] = "C:\\Program Files\\Git\\usr\\bin;" + os.environ["PATH"]

# create fresh destination directory
logging.info("Creating directory %s" % args.destination_dir)
if os.path.exists(args.destination_dir):
    shutil.rmtree(args.destination_dir)
os.mkdir(args.destination_dir)
include_dir = os.path.join(args.destination_dir, "include")
library_dir = os.path.join(args.destination_dir, "lib")

# create output directory
if not os.path.exists(args.output_dir):
    os.mkdir(args.output_dir)

output_file = os.path.join(args.output_dir, "openssl-%s.tar.bz2" % get_platform())
if not os.path.exists(output_file):
    tarball_url = "https://www.openssl.org/source/openssl-1.1.1f.tar.gz"
    tarball_file = download(tarball_url, cache_dir=args.cache_dir)

    current_dir = os.getcwd()
    with tempfile.TemporaryDirectory() as build_dir:
        logging.info("Extracting %s to %s" % (tarball_file, build_dir))
        subprocess.check_call(
            ["tar", "xf", tarball_file, "-C", build_dir, "--strip-components", "1"]
        )
        os.chdir(build_dir)

        logging.info("Building OpenSSL")
        subprocess.check_call(["./config", "no-comp", "no-shared", "no-tests"])
        subprocess.check_call(["make"])

        logging.info("Installing files")
        shutil.copytree("include", include_dir)
        os.mkdir(library_dir)
        shutil.copy("libcrypto.a", library_dir)
        shutil.copy("libssl.a", library_dir)

        os.chdir(current_dir)

    logging.info("Creating %s" % output_file)
    subprocess.check_call(
        ["tar", "cjvf", output_file, "-C", args.destination_dir, "include", "lib"]
    )
